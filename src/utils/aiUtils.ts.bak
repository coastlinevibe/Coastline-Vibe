import { createClient } from '@/lib/supabase/client';

/**
 * Gets the base URL for API calls based on the current window location
 * Handles development environment with either port 3000 or 3001
 */
function getApiBaseUrl(): string {
  if (typeof window !== 'undefined') {
    // Use the current window's origin (includes the correct port)
    const origin = window.location.origin;
    
    // For development environment, ensure consistency between ports
    if (process.env.NODE_ENV === 'development') {
      // If we're on port 3000 but APIs expect 3001, modify the URL
      if (origin.includes('localhost:3000')) {
        console.log('Development mode detected on port 3000, adjusting API calls to port 3001');
        return origin.replace('localhost:3000', 'localhost:3001');
      }
      
      // If we're already on port 3001, use it directly
      if (origin.includes('localhost:3001')) {
        return origin;
      }
      
      // For any other localhost port, default to 3001
      if (origin.includes('localhost')) {
        console.log('Development mode detected, using port 3001 for API calls');
        return `http://localhost:3001`;
      }
    }
    
    // For production or any other environment, use the current origin
    return origin;
  }
  
  // Fallback for server-side rendering in development
  if (process.env.NODE_ENV === 'development') {
    return 'http://localhost:3001';
  }
  
  // Fallback for server-side rendering in production
  return process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';
}

/**
 * Politely rewrites the given text to make it more friendly and community-appropriate.
 * 
 * @param text The text to rewrite
 * @returns The rewritten text
 */
export async function politeRewrite(text: string): Promise<string> {
  try {
    const baseUrl = getApiBaseUrl();
    console.log(`Using API base URL: ${baseUrl}`);
    
    const response = await fetch(`${baseUrl}/api/ai/polite-rewriter`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Error from rewrite API:', error);
      return text; // Return the original text on error
    }

    const data = await response.json();
    return data.rewrittenText;
  } catch (error) {
    console.error('Error rewriting text:', error);
    return text; // Return the original text on error
  }
}

/**
 * Generates content suggestions based on the user's input
 * 
 * @param promptStart The beginning of the post content
 * @returns Suggested completions for the post
 */
export async function generateContentSuggestions(
  promptStart: string,
  communityId: string | undefined
): Promise<string[]> {
  try {
    // Fetch community info to provide context
    let communityContext = {};
    if (communityId) {
      const supabase = createClient();
      const { data } = await supabase
        .from('communities')
        .select('name, description')
        .eq('id', communityId)
        .single();
      
      if (data) {
        communityContext = {
          communityName: data.name,
          communityDescription: data.description,
        };
      }
    }

    const baseUrl = getApiBaseUrl();
    const response = await fetch(`${baseUrl}/api/ai/suggest`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        promptStart,
        communityContext
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Error from suggestion API:', error);
      return [];
    }

    const data = await response.json();
    return data.suggestions || [];
  } catch (error) {
    console.error('Error generating content suggestions:', error);
    return [];
  }
}

/**
 * Analyzes content for potential moderation issues
 * 
 * @param content The content to analyze
 * @returns Information about potential issues and kindness suggestions
 */
export async function moderateContent(content: string): Promise<{
  isAppropriate: boolean;
  kindnessSuggestion: string | null;
  confidence: number;
}> {
  try {
    const baseUrl = getApiBaseUrl();
    const response = await fetch(`${baseUrl}/api/ai/moderate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Error from moderation API:', error);
      return { isAppropriate: true, kindnessSuggestion: null, confidence: 1 };
    }

    const data = await response.json();
    return {
      isAppropriate: data.isAppropriate,
      kindnessSuggestion: data.kindnessSuggestion,
      confidence: data.confidence,
    };
  } catch (error) {
    console.error('Error moderating content:', error);
    return { isAppropriate: true, kindnessSuggestion: null, confidence: 1 };
  }
} 